import { MainMenu } from "components/main_menu.slint";
import { SaveView } from "components/save.slint";
import { LoadView } from "components/load.slint";
import { SettingsView } from "components/settings.slint";
import { StoryView } from "components/story.slint";

export component MainWindow inherits Window {
    min-width: 1280px;
    min-height: 720px;
    title: "RustEng";

    // 所有原有的属性保持不变
    in property<string> dialogue;
    in property<string> speaker;
    in property <[{ front: string, back: string, script: string, index: int }]> backlogs;
    in property<[{ index: int, text: string }]> choose-branch;
    in property<image> bg;
    in property<string> pre-bg;
    in property<image> fg-body-0;
    in property<image> fg-face-0;
    in property<bool> is-fullscreen: false;
    in-out property <bool> is_backlog: false;
    in-out property <bool> is-auto;
    in property<int> current-choose: 0;
    in property <float> rate;
    in property <float> face-x;
    in property <float> face-y;
    property <bool> has-focus: true;

    in-out property <int> current-screen: 0;
    in-out property <int> last-screen: 0;

    in property <[{name:string, index:int, bg:image, explain:string}]> save-items: [
        {explain:"空的"},{explain:"空的"},{explain:"空的"},{explain:"空的"},
        {explain:"空的"},{explain:"空的"},{explain:"空的"},{explain:"空的"},
        {explain:"空的"},{explain:"空的"},{explain:"空的"},{explain:"空的"},
        {explain:"空的"},{explain:"空的"},{explain:"空的"},{explain:"空的"},
    ];

    out property <float> main-volume: 100;
    out property <float> bgm-volume: 100;
    out property <float> voice-volume: 100;

    // 计算容器尺寸
    property <length> container-size: min(self.width, self.height * 16 / 9);
    property <length> container-width: container-size;
    property <length> container-height: container-size * 9 / 16;

    FocusScope {
        width: parent.width;
        height: parent.height;

        key-pressed(event) => {
            if (event.text == Key.F11) {
                root.toggle-fullscreen();
                accept
            } else {
                reject
            }
        }
    }

    // 居中容器
    Rectangle {
        width: container-width;
        height: container-height;
        x: (parent.width - self.width) / 2;
        y: (parent.height - self.height) / 2;

        // 主菜单界面
        if root.current-screen == 0: MainMenu {
            container-width: parent.width;
            container-height: parent.height;
            new-game => { root.current-screen = 2; }
            load-game => {
                root.last-screen = 0;
                root.current-screen = 4;
            }
            gallery => { /* 画廊逻辑 */ }
            settings => {
                root.last-screen = 0;
                root.current-screen = 1;
            }
            exit-game => { root.exit(); }
        }

        // 设置界面
        if root.current-screen == 1: SettingsView {
            container-width: parent.width;
            container-height: parent.height;
            is-fullscreen: root.is-fullscreen;
            main-volume <=> root.main-volume;
            bgm-volume <=> root.bgm-volume;
            voice-volume <=> root.voice-volume;

            back => { root.current-screen = root.last-screen; }
            toggle-fullscreen => { root.toggle-fullscreen(); }
            volume-changed => { root.volume-changed(); }
            voice-volume-changed => { root.voice-volume-changed(); }
        }

        // 剧情界面
        if root.current-screen == 2: StoryView {
            container-width: parent.width;
            container-height: parent.height;
            dialogue: root.dialogue;
            speaker: root.speaker;
            choose-branch: root.choose-branch;
            bg: root.bg;
            current-choose: root.current-choose;

            backlogs <=> root.backlogs;
            is_backlog <=> root.is_backlog;
            is-auto <=> root.is-auto;
            
            fg-body-0 <=> root.fg-body-0;
            fg-face-0 <=> root.fg-face-0;
            rate <=> root.rate;
            face-x <=> root.face-x;
            face-y <=> root.face-y;

            auto-play(b) => { root.auto-play(b); }
            backlog => {
                root.auto-play(false);
                root.backlog();
            }
            backlog-change(i) => { root.backlog-change(i); }
            backlog-jump(s, i) => { root.backlog-jump(s, i); }
            clicked => { root.clicked(); }
            choose(text) => { root.choose(text); }
            save-game => {
                root.auto-play(false);
                root.current-screen = 3;
            }
            load-game => {
                root.auto-play(false);
                root.last-screen = 2;
                root.current-screen = 4;
            }
            settings => {
                root.auto-play(false);
                root.last-screen = 2;
                root.current-screen = 1;
            }
        }

        if root.current-screen == 3: SaveView {
            container-width: parent.width;
            container-height: parent.height;

            save-items <=> root.save-items;

            save(index) => { root.save(index); }
            back => { root.current-screen = 2; }
        }

        if root.current-screen == 4: LoadView {
            container-width: parent.width;
            container-height: parent.height;
            save-items <=> root.save-items;

            load(name, index) => { root.load(name, index); }
            back => { root.current-screen = root.last-screen; }
        }
    }

    // 回调函数保持不变
    callback auto-play(bool);
    callback clicked();
    callback toggle-fullscreen();
    callback volume-changed();
    callback bgm-volume-changed();
    callback voice-volume-changed();
    callback backlog();
    callback backlog-change(int);
    callback backlog-jump(string, int);
    callback choose(string);
    callback save(int);
    callback load(string, int);
    callback exit();
}